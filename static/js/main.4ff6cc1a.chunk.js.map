{"version":3,"sources":["component/Form/Form.js","component/List/List.js","App.js","serviceWorker.js","index.js"],"names":["Form","onSubmit","this","props","addCourse","id","value","type","onChange","updateCourse","disabled","Component","List","state","isEdit","renderCourse","key","details","name","onClick","toggoleState","deleate","index","setState","updateCourseItem","e","preventDefault","editCourse","input","renderUpdateForm","ref","defaultValue","App","courses","current","target","push","deleateCourse","splice","courseList","length","map","course","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kNAceA,E,iLAXP,OACI,0BAAMC,SAAUC,KAAKC,MAAMC,WACvB,2BAAOC,GAAG,KAAKC,MAAOJ,KAAKC,MAAMG,MAAOC,KAAK,OAAOC,SAAUN,KAAKC,MAAMM,eACzE,4BAAQC,SAA+B,KAArBR,KAAKC,MAAMG,MAAcD,GAAG,SAASE,KAAK,UAA5D,mB,GALGI,aCmDJC,E,2MAlDXC,MAAQ,CACJC,QAAQ,G,EAEZC,aAAe,WACX,OACI,wBAAIC,IAAK,EAAKb,MAAMc,QAAQD,KACxB,8BAAO,EAAKb,MAAMc,QAAQC,MAC1B,4BAAQC,QAAS,kBAAM,EAAKC,iBAA5B,eACA,4BAAQD,QAAS,kBAAM,EAAKhB,MAAMkB,QAAQ,EAAKlB,MAAMmB,SAArD,mB,EAMZF,aAAe,WACX,IAAIN,EAAS,EAAKD,MAAMC,OACxB,EAAKS,SAAS,CACVT,QAASA,K,EAKjBU,iBAAmB,SAACC,GAChBA,EAAEC,iBACF,EAAKvB,MAAMwB,WAAW,EAAKxB,MAAMmB,MAAO,EAAKM,MAAMtB,OACnD,EAAKc,gB,EAKTS,iBAAmB,WACf,OACI,0BAAM5B,SAAU,EAAKuB,kBACjB,2BAAOM,IAAK,SAACxB,GAAY,EAAKsB,MAAQtB,GAASC,KAAK,OAAOwB,aAAc,EAAK5B,MAAMc,QAAQC,OAC5F,mD,wEAMR,IAAIJ,EAASZ,KAAKW,MAAMC,OACxB,OACI,kBAAC,WAAD,KACKA,EAASZ,KAAK2B,mBAAqB3B,KAAKa,oB,GA5CtCJ,aCyEJqB,E,2MAtEbnB,MAAQ,CACNoB,QAAS,CACP,CAAEf,KAAM,QACR,CAAEA,KAAM,OACR,CAAEA,KAAM,cACR,CAAEA,KAAM,WAEVgB,QAAS,I,EAIXzB,aAAe,SAACgB,GACd,EAAKF,SAAS,CACZW,QAAST,EAAEU,OAAO7B,S,EAItBF,UAAY,SAACqB,GACXA,EAAEC,iBACF,IAAIQ,EAAU,EAAKrB,MAAMqB,QACrBD,EAAU,EAAKpB,MAAMoB,QACzBA,EAAQG,KAAK,CAAElB,KAAMgB,IACrB,EAAKX,SAAS,CACZU,QAASA,EACTC,QAAS,M,EAKbG,cAAgB,SAACf,GACf,IAAIW,EAAU,EAAKpB,MAAMoB,QACzBA,EAAQK,OAAOhB,EAAO,GACtB,EAAKC,SAAS,CACZU,QAASA,K,EAKbN,WAAa,SAACL,EAAOhB,GACnB,IAAI2B,EAAU,EAAKpB,MAAMoB,QACZA,EAAQX,GACf,KAAWhB,EACjB,EAAKiB,SAAS,CACZU,QAASA,K,wEAIH,IAAD,OACDA,EAAU/B,KAAKW,MAAMoB,QAErBM,EADSN,EAAQO,OAErBP,EAAQQ,KAAI,SAACC,EAAQpB,GACnB,OACE,kBAAC,EAAD,CAAMK,WAAY,EAAKA,WAAYV,QAASyB,EAAQ1B,IAAKM,EAAOD,QAAS,EAAKgB,cAAef,MAAOA,OAGrG,iFACL,OACE,6BAASqB,UAAU,OACjB,2CACA,kBAAC,EAAD,CAAMrC,MAAOJ,KAAKW,MAAMqB,QAASzB,aAAcP,KAAKO,aAAcL,UAAWF,KAAKE,YAClF,4BACGmC,Q,GA/DO5B,aCSEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.4ff6cc1a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass Form extends Component {\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.props.addCourse}>\r\n                <input id='id' value={this.props.value} type='text' onChange={this.props.updateCourse} />\r\n                <button disabled={this.props.value === \"\"} id=\"button\" type='submit'>Add Course</button>\r\n            </form>\r\n        );\r\n    };\r\n\r\n}\r\n\r\n\r\nexport default Form;\r\n","import React, { Component, Fragment } from 'react';\r\nclass List extends Component {\r\n    state = {\r\n        isEdit: false\r\n    }\r\n    renderCourse = () => {\r\n        return (\r\n            <li key={this.props.details.key}>\r\n                <span>{this.props.details.name}</span>\r\n                <button onClick={() => this.toggoleState()}>Edit Course</button>\r\n                <button onClick={() => this.props.deleate(this.props.index)}>Delate Course</button>\r\n            </li>\r\n        );\r\n    }\r\n\r\n    // toggole between state \r\n    toggoleState = () => {\r\n        let isEdit = this.state.isEdit;\r\n        this.setState({\r\n            isEdit: !isEdit\r\n        })\r\n    }\r\n\r\n    // updateCourseItem\r\n    updateCourseItem = (e) => {\r\n        e.preventDefault();\r\n        this.props.editCourse(this.props.index, this.input.value);\r\n        this.toggoleState();\r\n\r\n\r\n    }\r\n    // render update form\r\n    renderUpdateForm = () => {\r\n        return (\r\n            <form onSubmit={this.updateCourseItem}>\r\n                <input ref={(value) => { this.input = value }} type='text' defaultValue={this.props.details.name} />\r\n                <button>Update Course</button>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let isEdit = this.state.isEdit;\r\n        return (\r\n            <Fragment>\r\n                {isEdit ? this.renderUpdateForm() : this.renderCourse()}\r\n            </Fragment>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default List;\r\n","import React, { Component } from 'react';\nimport Form from './component/Form/Form';\nimport List from './component/List/List';\nclass App extends Component {\n  state = {\n    courses: [\n      { name: \"HTML\" },\n      { name: \"Css\" },\n      { name: \"JavaScript\" },\n      { name: \"JQuery\" }\n    ],\n    current: ''\n  }\n\n  // updateCourse Function\n  updateCourse = (e) => {\n    this.setState({\n      current: e.target.value,\n    })\n  }\n  // addCourse\n  addCourse = (e) => {\n    e.preventDefault();\n    let current = this.state.current;\n    let courses = this.state.courses;\n    courses.push({ name: current });\n    this.setState({\n      courses: courses,\n      current: ''\n    });\n  }\n\n  //Deleate Course\n  deleateCourse = (index) => {\n    let courses = this.state.courses;\n    courses.splice(index, 1);\n    this.setState({\n      courses: courses,\n    })\n  }\n\n  // edit Course\n  editCourse = (index, value) => {\n    let courses = this.state.courses;\n    let course = courses[index];\n    course['name'] = value;\n    this.setState({\n      courses: courses,\n    })\n  }\n\n  render() {\n    const courses = this.state.courses;\n    const length = courses.length;  //  show error messege if there is no items\n    const courseList = length ? (\n      courses.map((course, index) => {\n        return (\n          <List editCourse={this.editCourse} details={course} key={index} deleate={this.deleateCourse} index={index} />\n        );\n      })\n    ) : (<h3>Sorry Ther's No Course to show Please add some ;)</h3>)\n    return (\n      <section className=\"app\">\n        <h2>Add courses</h2>\n        <Form value={this.state.current} updateCourse={this.updateCourse} addCourse={this.addCourse} />\n        <ul>\n          {courseList}\n        </ul>\n      </section>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}